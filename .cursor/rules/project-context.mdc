---
alwaysApply: true
---

# NumSwift Project Context

NumSwift is a Swift package that provides complex arithmetic and numerical computing capabilities for Swift, with extensive support for array arithmetic and matrix operations. The library leverages Apple's Accelerate framework for optimal performance when available.

## Project Architecture

### Multi-Target Structure
- **NumSwift**: Main Swift module providing high-level APIs and operator overloads
- **NumSwiftC**: C library for performance-critical operations (convolutions, matrix multiplication)
- **NumSwiftMetal**: GPU-accelerated operations using Metal framework

### Supported Data Types
- `Float` (32-bit floating point)
- `Double` (64-bit floating point)
- `Float16` (16-bit half-precision, ARM64 only)

### Platform Support
- iOS 14+
- macOS 11+
- tvOS 14+
- watchOS 7+
- ARM64 architecture required for Float16 operations

## Core Functionality

The library provides:
- Array arithmetic operators (`+`, `-`, `*`, `/`) for element-wise and broadcast operations
- Matrix operations: multiplication, transpose, dot products
- Convolution operations: 1D/2D convolutions, transposed convolutions
- Utility functions: shape analysis, padding, scaling, normalization

## Performance Strategy

NumSwift prioritizes performance through:
1. Apple Accelerate framework for standard mathematical operations
2. Custom C implementations for specialized operations
3. Metal GPU acceleration for large computations
4. Concurrent processing utilities in array extensions

When working on this project, always consider the performance implications and choose the appropriate implementation layer.# NumSwift Project Context

NumSwift is a Swift package that provides complex arithmetic and numerical computing capabilities for Swift, with extensive support for array arithmetic and matrix operations. The library leverages Apple's Accelerate framework for optimal performance when available.

## Project Architecture

### Multi-Target Structure
- **NumSwift**: Main Swift module providing high-level APIs and operator overloads
- **NumSwiftC**: C library for performance-critical operations (convolutions, matrix multiplication)
- **NumSwiftMetal**: GPU-accelerated operations using Metal framework

### Supported Data Types
- `Float` (32-bit floating point)
- `Double` (64-bit floating point)
- `Float16` (16-bit half-precision, ARM64 only)

### Platform Support
- iOS 14+
- macOS 11+
- tvOS 14+
- watchOS 7+
- ARM64 architecture required for Float16 operations

## Core Functionality

The library provides:
- Array arithmetic operators (`+`, `-`, `*`, `/`) for element-wise and broadcast operations
- Matrix operations: multiplication, transpose, dot products
- Convolution operations: 1D/2D convolutions, transposed convolutions
- Utility functions: shape analysis, padding, scaling, normalization

## Performance Strategy

NumSwift prioritizes performance through:
1. Apple Accelerate framework for standard mathematical operations
2. Custom C implementations for specialized operations
3. Metal GPU acceleration for large computations
4. Concurrent processing utilities in array extensions

When working on this project, always consider the performance implications and choose the appropriate implementation layer.